#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('battleship:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Callback for our HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    process.stderr(error);
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    process.stdout.write(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
    process.stdout.write(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Callback for our HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  if (process.pid) {
    process.stdout
    .write('\n' +
           '  ######BATTLE########'+ '\n' +
           '  ########SHIP########'+ '\n' +
           '  PID: ' + process.pid + '\n' +
           '  keep on keeping on aka do the stuff that you do so well' + '\n' +
           '\n'
          );
    if (process.env['BG_MODE']) {
      process.stdout.write('  you\'ve put my battleship in background! press ENTER to go back to the prompt\n');
    }
  }
  debug('Listening on ' + bind);
}
